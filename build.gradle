buildscript {
    repositories {
        google()
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:8.12.1'
    }
}

allprojects {
  repositories {
      google()
      mavenCentral()
  }
}

apply plugin: 'com.android.application'


import javax.inject.Inject
import org.gradle.api.DefaultTask
import org.gradle.api.tasks.*
import org.gradle.api.file.DirectoryProperty
import org.gradle.process.ExecOperations

abstract class GeneratePngsTask extends DefaultTask {
    @Inject
    abstract ExecOperations getExecOps()

    @InputFile
    abstract RegularFileProperty getSvg()

    @InputFile
    @Optional
    abstract RegularFileProperty getCss()

    @OutputDirectory
    abstract DirectoryProperty getOutputDir()

    @TaskAction
    void generate() {
        def outDir = getOutputDir().get().asFile
        outDir.mkdirs()

        // Map of density â†’ size
        def dpiConfigs = [
            "mipmap-mdpi"   : 48,
            "mipmap-hdpi"   : 72,
            "mipmap-xhdpi"  : 96,
            "mipmap-xxhdpi" : 144,
            "mipmap-xxxhdpi": 192
        ]

        def cssFile = getCss().isPresent() ? getCss().get().asFile : null

        dpiConfigs.each { dpi, size ->
            def dpiDir = new File(outDir, dpi)
            dpiDir.mkdirs()

            def outputFile = new File(dpiDir, "ic_wivrn_launcher.png")

            def argsList = [
                getSvg().get().asFile.absolutePath,
                "-w", size.toString(),
                "-h", size.toString(),
                "-o", outputFile.absolutePath
            ]
            if (cssFile != null) {
                argsList.add("--stylesheet=${cssFile.absolutePath}")
            }

            execOps.exec {
                executable = "rsvg-convert"
                args = argsList
            }
        }
    }
}

tasks.register("generatePngs", GeneratePngsTask) {
    group = "Custom"

    // configure defaults
    svg.set(layout.projectDirectory.file("images/wivrn.svg"))
    outputDir.set(layout.buildDirectory.dir("generated_resources"))

    if (project.hasProperty("wivrn_css")) {
        css.set(layout.projectDirectory.file(project.wivrn_css))
    } else {
        css.set(layout.projectDirectory.file("images/wivrn-local.css"))
    }
}



android {
    namespace = "org.meumeu.wivrn"
    ndkVersion = "28.1.13356709"

    lint {
        disable += "ExpiredTargetSdkVersion"
    }

    defaultConfig {
        applicationId "org.meumeu.wivrn"
        // for Vulkan, need at least 24
        // for AImage_getHardwareBuffer, API 26
        minSdkVersion 29
        compileSdkVersion 32
        targetSdkVersion 32 // for Oculus Store

        versionName = project.hasProperty('wivrn_version') ? wivrn_version : "1.0"
        versionCode = project.hasProperty('wivrn_versionCode') ? wivrn_versionCode.toInteger() : 1
        def showImguiDemo = project.hasProperty('wivrn_show_imgui_demo') ? wivrn_show_imgui_demo : 'OFF'
        def showDebugMenu = project.hasProperty('wivrn_show_debug_menu') ? wivrn_show_debug_menu : 'OFF'
        def compressGlb = project.hasProperty('wivrn_compress_glb') ? wivrn_compress_glb : 'OFF'

        externalNativeBuild {
            def css = project.hasProperty('wivrn_css') ? project.wivrn_css: "images/wivrn-local.css"

            cmake {
                arguments '-DANDROID_TOOLCHAIN=clang',
                          '-DANDROID_STL=c++_static',
                          '-DCMAKE_ANDROID_NDK_VERSION=' + ndkVersion,
                          '-DCMAKE_INTERPROCEDURAL_OPTIMIZATION=ON',
                          '-DCMAKE_EXPORT_COMPILE_COMMANDS=ON',
                          '-DWIVRN_USE_SYSTEM_BOOST=OFF',
                          '-DWIVRN_USE_SYSTEM_FREETYPE=OFF',
                          '-DWIVRN_BUILD_CLIENT=ON',
                          '-DWIVRN_BUILD_SERVER=OFF',
                          '-DWIVRN_BUILD_SERVER_LIBRARY=OFF',
                          '-DWIVRN_BUILD_WIVRNCTL=OFF',
                          '-DWIVRN_BUILD_DASHBOARD=OFF',
                          '-DWIVRN_WERROR=ON',
                          '-DWIVRN_SHOW_IMGUI_DEMO_WINDOW=' + showImguiDemo,
                          '-DWIVRN_CLIENT_DEBUG_MENU=' + showDebugMenu,
                          '-DWIVRN_CSS=' + css,
                          '-DWIVRN_COMPRESS_GLB=' + compressGlb
                resValue "string", "app_name", project.hasProperty('wivrn_app_name') ? project.wivrn_app_name : "WiVRn Local"
            }
        }
    }

    signingConfigs {
        if (project.hasProperty("signingKeyPassword")) {
            release {
                storeFile file("ks.keystore")
                keyAlias "default_key"
                storePassword signingKeyPassword // Set in gradle.properties
                keyPassword signingKeyPassword
                enableV2Signing = true
            }
        }
    }

    buildTypes {
        if (project.hasProperty("signingKeyPassword")) {
            release {
                signingConfig = signingConfigs.release
            }
        }

        release {
            manifestPlaceholders.ComOculusSupportedDevices = "all"
            applicationIdSuffix = project.hasProperty('suffix') ? suffix: ".local"
        }

        releaseDebuggable {
            initWith release
            debuggable true

            // Uncomment to have debug symbols
//             packagingOptions {
//                 doNotStrip "*/arm64-v8a/*.so"
//                 doNotStrip "*/armeabi-v7a/*.so"
//                 doNotStrip "*/x86/*.so"
//                 doNotStrip "*/x86_64/*.so"
//             }
        }

        oculus
        {
            initWith release
            applicationIdSuffix = project.hasProperty('suffix') ? suffix: ""
            manifestPlaceholders.ComOculusSupportedDevices = "quest2|quest3|questpro"
        }

        debug {
            applicationIdSuffix = project.hasProperty('suffix') ? suffix: ".local"
            manifestPlaceholders.ComOculusSupportedDevices = "all"
        }

        debugWithValidationLayer {
            initWith debug
            externalNativeBuild {
                cmake {
                    arguments '-DUSE_ANDROID_VALIDATION_LAYER=ON'
                }
            }
        }
    }

    flavorDimensions "device"

    productFlavors {
        standard {
            dimension "device"
            externalNativeBuild {
                cmake {
                    abiFilters 'arm64-v8a'//, 'x86_64'
                }
            }
        }
    }

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['client/java']
            res.srcDirs = [ 'resources', layout.buildDirectory.dir('generated_resources') ]

            assets.srcDirs 'assets'
        }
    }

    externalNativeBuild {
        cmake {
            version = '3.30.3'
            path    'CMakeLists.txt'
        }
    }

    tasks["preBuild"].dependsOn "generatePngs"

    applicationVariants.all { variant ->
        // It probably works with merge${variant.name.capitalize()}Assets too
        tasks["generate${variant.name.capitalize()}Assets"].dependsOn "externalNativeBuild${variant.name.capitalize()}"
    }

    productFlavors.all { variant ->
        sourceSets {
            "${variant.name}" {
                assets.srcDirs layout.buildDirectory.dir("assets${variant.name.capitalize()}")
            }
        }

        externalNativeBuild{
            cmake {
                arguments '-DCMAKE_ANDROID_ASSETS_DIRECTORIES=' + layout.buildDirectory.dir("assets${variant.name.capitalize()}").get().asFile
            }
        }
    }

    buildTypes.all { variant ->
        sourceSets {
            "${variant.name}" {
                jniLibs.srcDirs layout.buildDirectory.dir("libs${variant.name.capitalize()}")
            }
        }

        externalNativeBuild{
            cmake {
                arguments '-DCMAKE_ANDROID_LIB_DIRECTORIES=' + layout.buildDirectory.dir("libs${variant.name.capitalize()}").get().asFile
            }
        }
    }
}
